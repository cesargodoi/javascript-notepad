{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Resolvi fazer esta documenta\u00e7\u00e3o para ir registrando o meu aprendizado de <code>JavaScript</code>.</p>"},{"location":"basic/arrays/","title":"Arrays","text":"<p>Um <code>array</code> em JavaScript \u00e9 uma estrutura de dados que permite armazenar uma  cole\u00e7\u00e3o de elementos em uma \u00fanica vari\u00e1vel. Os elementos em um <code>array</code> podem  ser de qualquer tipo de dados, como <code>n\u00fameros</code>, <code>strings</code>, <code>objetos</code>, <code>fun\u00e7\u00f5es</code>  e at\u00e9 outros <code>arrays</code>.  Cada elemento em um <code>array</code> \u00e9 acessado por um <code>\u00edndice</code>, que \u00e9 um n\u00famero  inteiro que representa a posi\u00e7\u00e3o do elemento no <code>array</code>.</p> <p>Vamos considerar o seguinte <code>array</code> abaixo:  </p> <pre><code>const alunos = ['Cesar', 'Ot\u00e1vio', 'Jady'];\nconsole.log(alunos);                   // ['Cesar', 'Ot\u00e1vio', 'Jady']\nconsole.log(typeof alunos);            // object\nconsole.log(alunos instanceof Array);  // true\n</code></pre> <p>Podemos acessar os elementos do <code>array</code> \u00e0 partir dos seus <code>\u00edndices</code>: <pre><code>console.log(alunos[0]);   // Cesar\nconsole.log(alunos[10]);  // undefined\n</code></pre></p> <p>Tamb\u00e9m \u00e9 possivel atualizar um elemento do <code>array</code> usando o seu <code>\u00edndice</code>: <pre><code>alunos[1] = 'Floriano';\nconsole.log(alunos);  // ['Cesar', 'Floriano', 'Jady']\n</code></pre></p> <p>Podemos inserir um novo elemento a um <code>array</code> apontando esse elemento para um  <code>\u00edndice</code> maior do que o \u00faltimo <code>\u00edndice</code> do <code>array</code>. <pre><code>alunos[3] = 'Ot\u00e1vio';\nconsole.log(alunos);  // ['Cesar', 'Floriano', 'Jady', 'Ot\u00e1vio']\n</code></pre></p>"},{"location":"basic/arrays/#metodos","title":"M\u00e9todos","text":""},{"location":"basic/arrays/#push","title":"push","text":"<p>Adiciona um elemento ao final da lista <pre><code>alunos.push('Fon');\nconsole.log(alunos);  // ['Cesar', 'Floriano', 'Jady', 'Ot\u00e1vio', 'Fon']\n</code></pre></p>"},{"location":"basic/arrays/#unshift","title":"unshift","text":"<p>adiciona um elemento ao in\u00edcio da lista <pre><code>alunos.unshift('Edu');\nconsole.log(alunos);  // ['Edu', 'Cesar', 'Floriano', 'Jady', 'Ot\u00e1vio', 'Fon']\n</code></pre></p>"},{"location":"basic/arrays/#pop","title":"pop","text":"<p>remove o \u00faltimo elemento <pre><code>alunos.pop();\nconsole.log(alunos);                    // ['Edu', 'Cesar', 'Floriano', 'Jady', 'Ot\u00e1vio']\nlet removido = alunos.pop();            // remove o \u00faltimo elemento e o atribui \u00e0 vari\u00e1vel removido\nconsole.log(`removido = ${removido}`);  // removido = Ot\u00e1vio\nconsole.log(alunos);                    // ['Edu', 'Cesar', 'Floriano', 'Jady']\n</code></pre></p>"},{"location":"basic/arrays/#shift","title":"shift","text":"<p>remove o primeiro elemento  <pre><code>alunos.shift();\nconsole.log(alunos);                    // ['Cesar', 'Floriano', 'Jady']\nremovido = alunos.shift();              // remove o primeiro elemento e o atribui \u00e0 vari\u00e1vel removido\nconsole.log(`removido = ${removido}`);  // removido = Cesar\nconsole.log(alunos);                    // ['Floriano', 'Jady']\n</code></pre></p>"},{"location":"basic/arrays/#delete","title":"delete","text":"<p>apaga o conte\u00fado de um \u00edndice <pre><code>delete alunos[0];\nconsole.log(alunos);  // [&lt;1 empty item&gt;, 'Jady']\n\n// ajustar a lista para os proximos exemplos\nalunos[0] = 'Cesar';\nalunos.push('Edu');\nalunos.push('Ot\u00e1vio');\nconsole.log(alunos);\n</code></pre></p>"},{"location":"basic/arrays/#slice","title":"slice","text":"<p>seleciona elementos sequenciais <pre><code>console.log(alunos.slice(0, 2));  // ['Cesar', 'Jady']\nconsole.log(alunos.slice(-2));    // ['Edu', 'Ot\u00e1vio']\n</code></pre></p>"},{"location":"basic/arrays/#join","title":"join","text":"<p>transforma um array em uma string <pre><code>const nomesAlunos = alunos.join(' ');\nconsole.log(nomesAlunos);  // Cesar Jady Edu Ot\u00e1vio \n</code></pre></p>"},{"location":"basic/arrays/#concat","title":"concat","text":"<p>concatena arrays <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = arr1.concat(arr2, [7, 8, 9], 'Cesar');\nconsole.log(arr3);  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 'Cesar' ]\n</code></pre></p>"},{"location":"basic/arrays/#spread-operator","title":"spread operator <code>...</code>","text":"<p>usando o spread operator para concatenas <code>strings</code> <pre><code>const arr4 = [...arr1, 'Cesar', ...arr2, ...[7, 8, 9]];\nconsole.log(arr4);  // [ 1, 2, 3, 'Cesar', 4, 5, 6, 7, 8, 9 ]\n</code></pre></p>"},{"location":"basic/js-html/","title":"Html + JavaScript","text":"<p>Lincamos a nossa p\u00e1gina <code>index.html</code> com o nosso script <code>main.js</code>, atrav\u00e9s do atributo <code>src</code> da tag <code>script</code>:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;With HTML&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;script src=\"./main.js\"&gt;&lt;/script&gt; &lt;!- aqui n\u00f3s fazemos a jun\u00e7\u00e3o -&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> main.js<pre><code>/**\n * Tudo o que for colocado dentro do 'main.js' \n * ser\u00e1 aplicado no arquivo 'index.html'.\n*/\n\nalert('Os arquivos est\u00e3o lincados!');  // ser\u00e1 mostrada em uma caixa de mensagem\n\nconsole.log('J\u00e1 essa mensagen, aparecer\u00e1 no console do navegador');\n</code></pre>"},{"location":"basic/numbers/","title":"N\u00fameros","text":"<p>Os principais tipos de n\u00fameros em JavaScript s\u00e3o:</p> <p>N\u00fameros inteiros (Integers): Representam n\u00fameros inteiros, positivos ou negativos, sem casas decimais. Exemplos: 42, -10, 0.</p> <p>N\u00fameros de ponto flutuante (Floating-Point Numbers): S\u00e3o usados para representar n\u00fameros com casas decimais. JavaScript usa o padr\u00e3o IEEE 754 para representar n\u00fameros de ponto flutuante de precis\u00e3o dupla. Exemplos: 3.14, -0.5, 1.0.</p> <pre><code>// Alguns exemplos\nlet num1 = 1;\nlet num2 = 2.5;\n\nconsole.log(num1 + num2);  // 3.5\n\n// .toString()\nconsole.log(num1.toString() + num2);  // 12.5 (sting)\n\nlet num3 = 123;\nconsole.log(num3.toString(2));   // 1111011 (bin\u00e1rio)\nconsole.log(num3.toString(8));   // 173 (octal)\nconsole.log(num3.toString(16));  // 7b (hexadecimal)\n\n// .toFixed()\nlet num4 = 23.3566352435\nconsole.log(num4.toFixed(2));  // 23.36\n\n// Number.isIntteger()\nconsole.log(Number.isInteger(num1));  // true\nconsole.log(Number.isInteger(num2));  // false\n\n// Number.isNaN()\nlet temp1 = num2 * 'X';\nlet temp2 = num2 * '10';\nconsole.log(Number.isNaN(temp1));  // true\nconsole.log(Number.isNaN(temp2));  // false\n</code></pre> <p>O javascript usa IEEE 754-2008 para gerenciar os seu c\u00e1lculos.</p> <pre><code>// imprecis\u00f5es\nlet n1 = 0.7;\nlet n2 = 0.1;\n\nconsole.log(n1 + n2);  // 0.7999999999999999 \ud83e\udd14\n\nconsole.log(100 / 0);  // Infinity \ud83e\udd14\n</code></pre>"},{"location":"basic/strings/","title":"Strings","text":"<p>Em JavaScript, uma <code>string</code> \u00e9 um tipo de dado que representa uma sequ\u00eancia de caracteres.  As strings s\u00e3o usadas para armazenar e manipular texto em JavaScript.  Uma <code>string</code> pode conter letras, n\u00fameros, s\u00edmbolos e espa\u00e7os.</p> <pre><code>// indexa\u00e7\u00e3o\n//          0123456789...\nlet text = \"O rato comeu o Queijo\";\n\nconsole.log(text[4]);   // t\nconsole.log(text[13]);  // o\nconsole.log(text[19]);  // j\nconsole.log(text[21]);  // undefined\nconsole.log(text[-1]);  // undefined\n</code></pre>"},{"location":"basic/strings/#metodos","title":"M\u00e9todos","text":""},{"location":"basic/strings/#charat","title":"charAt","text":"<pre><code>//String.charAt(pos: number): string\nconsole.log(text.charAt(3));   // a  \nconsole.log(text.charAt(21));  // ''\n</code></pre>"},{"location":"basic/strings/#concat","title":"concat","text":"<pre><code>// String.concat(...strings: string[]): string\nconsole.log(text.concat('!'));  // O rato comeu o queijo!\n</code></pre>"},{"location":"basic/strings/#indexof","title":"indexOf","text":"<pre><code>// String.indexOf(searchString: string, position?: number | undefined): number\nconsole.log(text.indexOf('comeu'));  // 7  (inicia na posi\u00e7\u00e3o 7)\nconsole.log(text.indexOf('Comeu'));  // -1 (nada foi encontrado)\n</code></pre>"},{"location":"basic/strings/#lastindexof","title":"lastIndexOf","text":"<pre><code>// String.lastIndexOf(searchString: string, position?: number | undefined): number\nconsole.log(text.lastIndexOf('o'));  // 20 (mostra a \u00faltima ocorr\u00eancia)\n</code></pre>"},{"location":"basic/strings/#match","title":"match","text":"<pre><code>// Regular Expression\nconsole.log(text.match(/[A-Z]/));  // ['O', index: 0, input: 'O rato... ] \nconsole.log(text.match(/[A-Z]/g));  // ['O', 'Q'] \n</code></pre>"},{"location":"basic/strings/#search","title":"search","text":"<pre><code>// Regular Expression\nconsole.log(text.search(/o/));  // 5 (primeira ocorr\u00eancia)\n</code></pre>"},{"location":"basic/strings/#replace","title":"replace","text":"<pre><code>// Regular Expression\nconsole.log(text.replace('o', '#'));   // O rat# comeu o Queijo\nconsole.log(text.replace(/o/, '#'));   // O rat# comeu o Queijo\nconsole.log(text.replace(/o/g, '#'));  // O rat# c#meu # Queij#\n</code></pre>"},{"location":"basic/strings/#length","title":"length","text":"<pre><code>console.log(text.length);  // 21 (do 0 ao 20)\n</code></pre>"},{"location":"basic/strings/#slice","title":"slice","text":"<pre><code>// String.slice(start?: number | undefined, end?: number | undefined): string\nconsole.log(text.slice(7, 11 + 1));  // comeu\nconsole.log(text.slice(-6));         // Queijo\nconsole.log(text.slice(-6, -3));     // Que\n</code></pre>"},{"location":"basic/strings/#split","title":"split","text":"<pre><code>console.log(text.split(' '));  // [ 'O', 'rato', 'comeu', 'o', 'Queijo' ]\nconsole.log(text.split(' ', 2));  // [ 'O', 'rato' ]\n</code></pre>"},{"location":"basic/strings/#touppercase","title":"toUpperCase","text":"<pre><code>console.log(text.toUpperCase());  // O RATO COMEU O QUEIJO\n</code></pre>"},{"location":"basic/strings/#tolowercase","title":"toLowerCase","text":"<pre><code>console.log(text.toLowerCase());  // o rato comeu o queijo\n</code></pre>"},{"location":"basic/values/","title":"Valores","text":""},{"location":"basic/values/#primitivos","title":"Primitivos","text":"<p>Os valores primitivos s\u00e3o imut\u00e1veis:</p> <ul> <li>string </li> <li>number </li> <li>boolean</li> <li>undefined</li> <li>null</li> <li>bigint</li> <li>symbol</li> </ul> <p>Sempre que os atribu\u00edmos \u00e0 outra vari\u00e1veis, seus valores s\u00e3o copiados </p> <pre><code>let a = 12;\nlet b = a;  // o valor 12 \u00e9 copiado para b\nconsole.log(a, b);  // 12 12\nb = 17;\nconsole.log(a, b);  // 12 17\n</code></pre>"},{"location":"basic/values/#referencia","title":"Refer\u00eancia","text":"<p>Os valores de refer\u00eancia s\u00e3o mut\u00e1veis:</p> <ul> <li>array</li> <li>object</li> <li>function</li> </ul> <p>Sempre que os atribu\u00edmos \u00e0 outra vari\u00e1vel, a nova vari\u00e1vel aponta para o mesmo endere\u00e7o na mem\u00f3ria</p> <pre><code>const c = [1, 2, 3];\nconst d = c;  // a vari\u00e1vel d aponta para o mesmo endere\u00e7o de mem\u00f3ria que c\n\nconsole.log(c, d);  // [1, 2, 3] [1, 2, 3]\nd.push(4);\nconsole.log(c, d);  // [1, 2, 3, 4] [1, 2, 3, 4]\n\n\n// para fazer uma c\u00f3pia, podemos usar o spread operator `...`\nconst e = [...d]\n\nconsole.log(d, e);  // [1, 2, 3, 4] [1, 2, 3, 4]\ne.pop();\nconsole.log(d, e);  // [1, 2, 3, 4] [1, 2, 3]\n\n\n// mesmo exemplo com oobject\nconst f = { name: 'Cesar', age: 53 }\nconst g = { ...f }\n\nf.name = 'Jady'\nconsole.log(f, g);\n</code></pre>"},{"location":"basic/variables/","title":"Vari\u00e1veis e Constantes","text":""},{"location":"basic/variables/#let-e-var","title":"let e var","text":"<p>Em javascript podemos usar <code>let</code> e <code>var</code> para declarar vari\u00e1veis. No entanto devemos dar prefer\u00eancia ao <code>let</code>, pois \u00e9 mais moderna (ECMAScript 2015 - ES6).   </p> <p><code>let</code> tem escopo de bloco   <code>var</code>  tem escopo de fun\u00e7\u00e3o</p> <p>Regra Geral e boas pr\u00e1ticas para se nomear vari\u00e1veis no javascript:  </p> <ul> <li>Vari\u00e1veis s\u00e3o case-sensitive (diferencia mai\u00fasculas de min\u00fasculas);   </li> <li>N\u00e3o podemos criar vari\u00e1veis com palavras reservadas do javascript;   </li> <li>N\u00e3o podemos usar espa\u00e7os ' ' ou hifen '-';   </li> <li>N\u00e3o podemos come\u00e7ar o nome da vari\u00e1vel com n\u00fameros;   </li> <li>Vari\u00e1veis precisam ter nomes significativos   </li> <li>Utilizamos nota\u00e7\u00e3o camelCase</li> <li>N\u00e3o podemos redeclarar vari\u00e1veis com <code>let</code></li> <li>Sempre d\u00ea prefer\u00eancia em usar <code>let</code> ao inv\u00e9s de <code>var</code> </li> </ul> <pre><code>let name;  // vari\u00e1vel declarada sem nenhum valor atribuido \nconsole.log(name);  // returns undefined\n\nname = \"Maria Eneida\";\nconsole.log(name);  // retorna Maria Eneida\n\nlet otherName = \"Cesar Godoi\";  // vari\u00e1vel declarada com valor atribuido\nconsole.log(otherName);  // returno Cesar Godoi\n\n\nvar cidade = \"S\u00e3o Paulo\";  // vari\u00e1vel declarada com valor atribu\u00eddo\nconsole.log(cidade);  // retorna S\u00e3o Paulo\n\nvar cidade = \"Bauru\";  // 'var' pode ser re-declarada sem provocar erro\nconsole.log(cidade);  // retorna Bauru\n</code></pre>"},{"location":"basic/variables/#const","title":"const","text":"<p>Em javascript n\u00f3s usamos <code>const</code> para declarar constantes.</p> <p>No que diz respeito \u00e0s regras e boas pr\u00e1ticas na nomea\u00e7\u00e3o de constantes,  podemos dizer que al\u00e9m das descritas para <code>let</code> e <code>var</code>, temos as seguintes:</p> <ul> <li>Constantes precisam ser atribu\u00eddas com um valor ao serem declaradas;</li> <li>N\u00e3o podemos redeclarar constantes com <code>constant</code>;</li> <li>Sempre d\u00ea prefer\u00eancia em usar <code>const</code> ao inv\u00e9s de <code>let</code> ou <code>var</code> (quando poss\u00edvel);</li> </ul> <pre><code>const pi = 3.14;\nconsole.log(pi);  // retorna 3.14\n</code></pre>"}]}